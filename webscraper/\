import json
import operator
import math
from pprint import pprint
from dump_recipe_and_ingredient_data import getIngredientData
from dump_recipe_and_ingredient_data import getRecipeData
from collections import defaultdict
from textblob import TextBlob as tb

def createDict():
    ingredients = getIngredientData()
    ingredientNames = [ingred['name'] for ingred in ingredients]
    ingredDictionary = defaultdict(int)
    for name in ingredientNames:
        for word in name.split():
            ingredDictionary[word] += 1
    return ingredDictionary

def vectorize(ingredients, dic, numRecipes):
    wordList = ''
    for ingred in ingredients:
        wordList += ' '
        for w in ingred:
            wordList += w
    wordList = tb(wordList)

    tfidfDic = {}
    for word in wordList.words:
        tfScore = tf(word, wordList)
        idfScore = idf(word, dic, numRecipes)
        tfidfScore = tfScore * idfScore
        tfidfDic[word] = tfidfScore
    sorted_words = sorted(tfidfDic.items(), key=operator.itemgetter(1))
    print (sorted_words)
    return ingredients

def tf(word, blob):
    return blob.words.count(word) / len(blob.words)

def idf(word, dic, numRecipes):
    return math.log(numRecipes / (1 + dic[word]))

def getFeatures():
    dic = createDict()
    features = []
    recipes = getRecipeData()
    for r in recipes:
        ingredScores = vectorize(r['ingredient_names'], dic, len(recipes))
        features.extend((r['recipe'], ingredScores))
        break
    print (features)


getFeatures()
